---
import { Image } from "astro:assets";
import { LinkButton } from "@astrojs/starlight/components";

const { data } = Astro.locals.starlightRoute.entry;
const { tagline, image } = data.hero || {};

const imageAttrs = {
  loading: "eager" as const,
  decoding: "async" as const,
  width: 400,
  alt: image?.alt || "",
};

let darkImage: ImageMetadata | undefined;
let lightImage: ImageMetadata | undefined;
if (image) {
  if ("file" in image) {
    darkImage = image.file;
  } else if ("dark" in image) {
    darkImage = image.dark;
    lightImage = image.light;
  }
}

// Hard-coded links cause I can't figure out how to extend
// existing astro types :(
const buttonActions = [
  {
    text: "Get started",
    link: "/docs/get-started",
    variant: "primary",
    icon: { name: "right-arrow" },
  },
] as any[];

const githubLink = {
  text: "View on GitHub",
  link: "https://github.com/firebase/genkit",
};
---

<div class="hero">
  {
    darkImage && (
      <Image
        src={darkImage}
        {...imageAttrs}
        class="hero-image"
        class:list={{ "light:sl-hidden": Boolean(lightImage) }}
      />
    )
  }
  {
    lightImage && (
      <Image src={lightImage} {...imageAttrs} class="dark:sl-hidden hero-image" />
    )
  }
  <div class="sl-flex stack">
    <div class="sl-flex copy">
      {tagline && <div class="tagline" set:html={tagline} />}
    </div>
    <div class="sl-flex actions" style="margin-top: 2.5rem;">
      {buttonActions.map(({ icon, link: href, text, variant }) => (
        <LinkButton
          {href}
          {variant}
          icon={icon?.name}
          class:list={"link-text"}
        >
          {text}
          {icon?.html && <Fragment set:html={icon.html} />}
        </LinkButton>
      ))}
      <a href={githubLink.link} class="github-link">
        {githubLink.text}
        <svg width="16" height="16" viewBox="0 0 24 24" fill="none" stroke="currentColor" stroke-width="2" stroke-linecap="round" stroke-linejoin="round">
          <path d="M18 13v6a2 2 0 0 1-2 2H5a2 2 0 0 1-2-2V8a2 2 0 0 1 2-2h6M15 3h6v6M10 14L21 3"/>
        </svg>
      </a>
    </div>
  </div>
</div>

<style>
  @layer starlight.core {
    .hero {
      display: flex;
      flex-direction: column;
      align-items: center;
      gap: 1rem;
      padding-bottom: 90px;
    }

    .hero-image {
      width: 300px !important;
      height: auto !important;

      margin: 40px  !important;
    }

    .hero > img,
    .hero > .hero-html {
      object-fit: contain;
      width: min(70%, 20rem);
      height: auto;
      margin-inline: auto;
    }

    .stack {
      flex-direction: column;
      /* gap: clamp(1.5rem, calc(1.5rem + 1vw), 2rem); */
      text-align: center;
    }

    .copy {
      flex-direction: column;
      gap: 1rem;
      align-items: center;
    }

    .copy > * {
      max-width: 50ch;
    }

    .link-text {
      font-size: 20px !important;
      line-height: 100% !important;
    }

    .badge {
      padding: 5px 0;
      text-transform: uppercase;
      font-size: 14px;
      line-height: 100%;
    }

    h1 {
      font-size: clamp(
        var(--sl-text-3xl),
        calc(0.25rem + 5vw),
        var(--sl-text-6xl)
      );
      line-height: var(--sl-line-height-headings);
      font-weight: 600;
      color: var(--sl-color-white);
    }

    .tagline {
      text-align: center;
      font-size: clamp(
        var(--sl-text-base),
        calc(0.0625rem + 2vw),
        var(--sl-text-xl)
      );
      color: var(--sl-color-gray-2);
    }

    .actions {
      align-items: center;
      gap: 1rem 2rem;
      flex-wrap: wrap;
      justify-content: center;
    }

    .github-link {
      display: inline-flex;
      align-items: center;
      gap: 0.5rem;
      color: var(--sl-color-gray-2);
      text-decoration: none;
      font-size: 20px;
      font-weight: 500;
      line-height: 100%;
      transition: color 0.2s ease;
    }

    .github-link:hover {
      color: var(--sl-color-white);
    }

    .github-link svg {
      width: 16px;
      height: 16px;
      opacity: 0.8;
    }

    @media (min-width: 50rem) {
      .hero {
        grid-template-columns: 7fr 4fr;
        gap: 3%;
      }

      .hero > img,
      .hero > .hero-html {
        width: min(100%, 25rem);
      }

      .stack {
        text-align: start;
      }

      .copy {
        align-items: flex-start;
      }
    }
  }
</style>
