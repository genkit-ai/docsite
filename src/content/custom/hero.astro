---
import { Image } from "astro:assets";
import { LinkButton } from "@astrojs/starlight/components";

const { data } = Astro.locals.starlightRoute.entry;
const { tagline, image } = data.hero || {};

const imageAttrs = {
  loading: "eager" as const,
  decoding: "async" as const,
  width: 400,
  alt: image?.alt || "",
};

let darkImage: ImageMetadata | undefined;
let lightImage: ImageMetadata | undefined;
if (image) {
  if ("file" in image) {
    darkImage = image.file;
  } else if ("dark" in image) {
    darkImage = image.dark;
    lightImage = image.light;
  }
}

// Hard-coded links cause I can't figure out how to extend
// existing astro types :(
const actions = [
  {
    text: "Node.js",
    link: "/docs/get-started",
    variant: "primary",
    badge: "stable",
  },
  {
    text: "Go",
    link: "/go/docs/get-started-go",
    variant: "primary",
    badge: "beta",
  },
  {
    text: "Python",
    link: "/python/docs/get-started",
    variant: "primary",
    badge: "alpha",
  },
] as any[];
---

<div class="hero">
  {
    darkImage && (
      <Image
        src={darkImage}
        {...imageAttrs}
        class="hero-image"
        class:list={{ "light:sl-hidden": Boolean(lightImage) }}
      />
    )
  }
  {
    lightImage && (
      <Image src={lightImage} {...imageAttrs} class="dark:sl-hidden hero-image" />
    )
  }
  <div class="sl-flex stack">
    <div class="sl-flex copy">
      {tagline && <div class="tagline" set:html={tagline} />}
    </div>
    <p class="text-center text-gray-400 text-sm mt-[30px] mb-[12px]">
      Get started with:
    </p>
    {
      actions.length > 0 && (
        <div class="sl-flex actions">
          {actions.map(({ icon, link: href, text, variant, badge }) => (
            <LinkButton
              {href}
              {variant}
              icon={icon?.name}
              class:list={"link-text"}
            >
              {text}
              {icon?.html && <Fragment set:html={icon.html} />}
              {badge && (
                <span
                  class="badge dark:text-neutral-500 text-neutral-300"
                  set:html={badge}
                />
              )}
            </LinkButton>
          ))}
        </div>
      )
    }
  </div>
</div>

<style>
  @layer starlight.core {
    .hero {
      display: flex;
      flex-direction: column;
      align-items: center;
      gap: 1rem;
      padding-bottom: 90px;
    }

    .hero-image {
      width: 300px !important;
      height: auto !important;

      margin: 40px  !important;
    }

    .hero > img,
    .hero > .hero-html {
      object-fit: contain;
      width: min(70%, 20rem);
      height: auto;
      margin-inline: auto;
    }

    .stack {
      flex-direction: column;
      /* gap: clamp(1.5rem, calc(1.5rem + 1vw), 2rem); */
      text-align: center;
    }

    .copy {
      flex-direction: column;
      gap: 1rem;
      align-items: center;
    }

    .copy > * {
      max-width: 50ch;
    }

    .link-text {
      font-size: 20px !important;
      line-height: 100% !important;
    }

    .badge {
      padding: 5px 0;
      text-transform: uppercase;
      font-size: 14px;
      line-height: 100%;
    }

    h1 {
      font-size: clamp(
        var(--sl-text-3xl),
        calc(0.25rem + 5vw),
        var(--sl-text-6xl)
      );
      line-height: var(--sl-line-height-headings);
      font-weight: 600;
      color: var(--sl-color-white);
    }

    .tagline {
      text-align: center;
      font-size: clamp(
        var(--sl-text-base),
        calc(0.0625rem + 2vw),
        var(--sl-text-xl)
      );
      color: var(--sl-color-gray-2);
    }

    .actions {
      align-items: center;
      gap: 1rem 2rem;
      flex-wrap: wrap;
      justify-content: center;
    }

    @media (min-width: 50rem) {
      .hero {
        grid-template-columns: 7fr 4fr;
        gap: 3%;
      }

      .hero > img,
      .hero > .hero-html {
        width: min(100%, 25rem);
      }

      .stack {
        text-align: start;
      }

      .copy {
        align-items: flex-start;
      }
    }
  }
</style>
