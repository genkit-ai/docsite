---
// Get current language from URL or default
const currentLang = Astro.url.searchParams.get('lang') || 'js';

const languageOptions = [
  { value: 'js', label: 'JavaScript', icon: 'üìú' },
  { value: 'go', label: 'Go', icon: 'üî∑' },
  { value: 'python', label: 'Python (Preview)', icon: 'üêç' },
];
---

<div class="global-language-selector">
  <label for="language-select" class="sr-only">Select programming language</label>
  <select 
    id="language-select" 
    class="language-dropdown"
    data-current-lang={currentLang}
  >
    {languageOptions.map(({ value, label, icon }) => (
      <option value={value} selected={currentLang === value}>
        {icon} {label}
      </option>
    ))}
  </select>
</div>

<script>
// Language selector functionality
document.addEventListener('DOMContentLoaded', () => {
  const selector = document.getElementById('language-select') as HTMLSelectElement | null;
  if (!selector) return;

  selector.addEventListener('change', (e) => {
    const newLang = (e.target as HTMLSelectElement).value;
    // Use existing UnifiedPageManager
    if ((window as any).unifiedPageManager) {
      (window as any).unifiedPageManager.setLanguagePublic(newLang);
    }
  });

  // Update selector when language changes (e.g., from URL or other triggers)
  const observer = new MutationObserver(() => {
    const currentLang = document.documentElement.getAttribute('data-genkit-lang') || 'js';
    if (selector.value !== currentLang) {
      selector.value = currentLang;
    }
  });

  observer.observe(document.documentElement, {
    attributes: true,
    attributeFilter: ['data-genkit-lang']
  });
});
</script>

<style>
.global-language-selector {
  padding: 1rem;
  border-bottom: 1px solid var(--sl-color-gray-5);
  margin-bottom: 0.5rem;
}

.language-dropdown {
  width: 100%;
  padding: 0.625rem 0.875rem;
  background: var(--sl-color-bg-nav);
  border: 1px solid var(--sl-color-gray-5);
  border-radius: 0.5rem;
  color: var(--sl-color-white);
  font-size: 0.875rem;
  font-weight: 500;
  cursor: pointer;
  transition: all 0.2s ease;
  appearance: none;
  background-image: url("data:image/svg+xml,%3Csvg xmlns='http://www.w3.org/2000/svg' width='12' height='12' viewBox='0 0 12 12'%3E%3Cpath fill='%23fff' d='M6 9L1 4h10z'/%3E%3C/svg%3E");
  background-repeat: no-repeat;
  background-position: right 0.75rem center;
  padding-right: 2.5rem;
}

.language-dropdown:hover {
  border-color: var(--sl-color-accent);
  background-color: var(--sl-color-gray-6);
}

.language-dropdown:focus {
  outline: 2px solid var(--sl-color-accent);
  outline-offset: 2px;
}

.language-dropdown option {
  background: var(--sl-color-bg-nav);
  color: var(--sl-color-white);
  padding: 0.5rem;
}

/* Mobile adjustments */
@media (max-width: 50rem) {
  .global-language-selector {
    padding: 0.75rem 1rem;
  }
  
  .language-dropdown {
    font-size: 1rem;
    padding: 0.75rem 1rem;
  }
}

/* Screen reader only class */
.sr-only {
  position: absolute;
  width: 1px;
  height: 1px;
  padding: 0;
  margin: -1px;
  overflow: hidden;
  clip: rect(0, 0, 0, 0);
  white-space: nowrap;
  border-width: 0;
}
</style>