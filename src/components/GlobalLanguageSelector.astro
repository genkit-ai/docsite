---
const languageOptions = [
  { value: 'js', label: 'JavaScript' },
  { value: 'go', label: 'Go' },
  { value: 'python', label: 'Python (Preview)' },
];
---

<div class="global-language-selector">
  <label for="global-language-select" class="sr-only">Select programming language</label>
  
  <!-- Display current language (CSS-controlled, no flicker) -->
  <div class="language-display">
    <span class="lang-display" data-lang="js">JavaScript</span>
    <span class="lang-display" data-lang="go">Go</span>
    <span class="lang-display" data-lang="python">Python (Preview)</span>
    <svg class="dropdown-arrow" width="12" height="12" viewBox="0 0 12 12" fill="none" xmlns="http://www.w3.org/2000/svg">
      <path d="M6 9L1 4h10z" fill="currentColor"/>
    </svg>
  </div>
  
  <!-- Hidden select for functionality -->
  <select 
    id="global-language-select" 
    class="language-dropdown-hidden"
    aria-label="Select programming language"
  >
    {languageOptions.map(({ value, label }) => (
      <option value={value}>
        {label}
      </option>
    ))}
  </select>
</div>

<script>
/**
 * Global Language Selector
 * Syncs with page-level selectors via UnifiedPageManager
 */

// Type declaration for UnifiedPageManager
declare global {
  interface Window {
    unifiedPageManager?: {
      setLanguagePublic: (lang: string) => void;
      getCurrentLanguage: () => string;
    };
  }
}

document.addEventListener('DOMContentLoaded', () => {
  const displayContainer = document.querySelector('.language-display') as HTMLElement;
  const hiddenSelect = document.getElementById('global-language-select') as HTMLSelectElement;
  
  if (!displayContainer || !hiddenSelect) return;

  // Click on display opens the hidden select
  displayContainer.addEventListener('click', () => {
    hiddenSelect.focus();
    hiddenSelect.click();
  });

  // Handle selection changes - UnifiedPageManager handles the rest
  hiddenSelect.addEventListener('change', (e) => {
    const newLang = (e.target as HTMLSelectElement).value;
    if (window.unifiedPageManager) {
      window.unifiedPageManager.setLanguagePublic(newLang);
    }
  });
});
</script>

<style>
.global-language-selector {
  padding: 0.75rem 1rem;
  margin-bottom: 0.25rem;
  position: relative;
}

.language-display {
  width: 100%;
  padding: 0.625rem 0.875rem;
  background: var(--sl-color-bg-nav);
  border: 1px solid var(--sl-color-gray-5);
  border-radius: 0.5rem;
  color: var(--sl-color-white);
  font-size: 0.875rem;
  font-weight: 500;
  cursor: pointer;
  transition: all 0.2s ease;
  display: flex;
  align-items: center;
  justify-content: space-between;
  position: relative;
}

.language-display:hover {
  border-color: var(--sl-color-accent);
  background-color: var(--sl-color-gray-6);
}

.language-display:focus-within {
  outline: 2px solid var(--sl-color-accent);
  outline-offset: 2px;
}

/* Hide all language displays by default */
.lang-display {
  display: none;
}

/* Show only the current language (CSS-controlled, no flicker!) */
html[data-genkit-lang="js"] .lang-display[data-lang="js"] {
  display: inline;
}

html[data-genkit-lang="go"] .lang-display[data-lang="go"] {
  display: inline;
}

html[data-genkit-lang="python"] .lang-display[data-lang="python"] {
  display: inline;
}

.dropdown-arrow {
  flex-shrink: 0;
  margin-left: 0.5rem;
}

/* Hidden select for functionality */
.language-dropdown-hidden {
  position: absolute;
  top: 0;
  left: 0;
  width: 100%;
  height: 100%;
  opacity: 0;
  cursor: pointer;
  font-size: 0.875rem;
}

/* Mobile adjustments */
@media (max-width: 50rem) {
  .global-language-selector {
    padding: 0.75rem 1rem;
  }
  
  .language-display {
    font-size: 1rem;
    padding: 0.75rem 1rem;
  }
}

/* Screen reader only */
.sr-only {
  position: absolute;
  width: 1px;
  height: 1px;
  padding: 0;
  margin: -1px;
  overflow: hidden;
  clip: rect(0, 0, 0, 0);
  white-space: nowrap;
  border-width: 0;
}
</style>