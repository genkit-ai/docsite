---

type ButtonVariant = 'primary' | 'secondary' | 'outline' | 'ghost' | 'icon' | 'chip';
type ButtonSize = 'sm' | 'md' | 'large';

interface Props {
  variant?: ButtonVariant;
  size?: ButtonSize;
  href?: string;
  type?: 'button' | 'submit' | 'reset';
  class?: string;
  fullWidth?: boolean;
  leadingIcon?: boolean;
  trailingIcon?: boolean;
}

const { 
  variant = 'primary', 
  size = 'md', 
  href, 
  type = 'button',
  class: className = '',
  fullWidth = false,
  leadingIcon = false,
  trailingIcon = false
} = Astro.props;

// Base classes
const baseClasses = [
  'inline-flex',
  'items-center', 
  'justify-center',
  'border',
  'no-underline',
  'rounded-full',
  'transition-colors duration-200',
].join(' ');

// Size system (sm: 32-36h, md: 40-44h, large: 48h+)
const sizes = {
  sm: {
    height: 'h-8',
    padding: 'px-4 py-2',
    text: 'text-xs'
  },
  md: {
    height: 'h-8',     // 44px  
    padding: 'px-6 py-2.5',
    text: 'text-xs'
  },
  large: {
    height: 'h-12',
    padding: 'px-8 py-3',
    text: 'text-sm'
  }
} as const;

// Variant system
const variants = {
  primary: {
    bg: `bg-gradient-to-b from-[#C6D2FF] to-[#A0B0E8] shadow-[0_4px_12px_rgba(79,57,246,0.3)]`,
    bgHover: `hover:bg-gradient-to-b hover:from-[#C6D2FF] hover:to-[#8A9AE0]`,
    text: 'text-black',
    border: `border border-[#C6D2FF]`,
    font: 'font-normal',
  },
  secondary: {
    bg: `bg-black/90 shadow-[inset_0_0_20px_rgba(198,210,255,0.4)]`,
    bgHover: `hover:bg-black/80 hover:shadow-[inset_0_0_30px_rgba(198,210,255,0.5)]`,
    text: 'text-white',
    border: `border border-[#C6D2FF]`,
    font: 'font-light',
  },
  outline: {
    bg: 'bg-transparent', 
    bgHover: 'hover:bg-purple-600/10',
    text: 'text-purple-400',
    border: 'border-purple-400',
    font: 'font-normal',
  },
  ghost: {
    bg: 'bg-transparent',
    bgHover: 'hover:bg-purple-600/10', 
    text: 'text-white',
    border: 'border-transparent',
    font: 'font-normal',
  },
  chip: {
    bg: 'bg-gray-800',
    bgHover: 'hover:bg-gray-700',
    text: 'text-white',
    border: 'border-gray-600',
    font: 'font-normal',
  },
  icon: {
    bg: 'bg-transparent',
    bgHover: 'hover:bg-purple-600/10',
    text: 'text-white', 
    border: 'border-transparent',
    font: 'font-normal',
  }
} as const;

const sizeConfig = sizes[size];
const variantConfig = variants[variant];

// Size classes
const sizeClasses = variant === 'icon' ? 
  `${sizeConfig.height} aspect-square p-0` : // Square for icon buttons
  `${sizeConfig.height} ${sizeConfig.padding} ${sizeConfig.text}`;

// Variant classes  
const variantClasses = [
  variantConfig.bg,
  variantConfig.bgHover,
  variantConfig.text,
  variantConfig.border,
  variantConfig.font
].join(' ');

// Icon spacing adjustments
const iconClasses = leadingIcon ? 'pl-3' : trailingIcon ? 'pr-3' : '';

// Full width
const widthClass = fullWidth ? 'w-full' : '';

const buttonClasses = [
  baseClasses,
  sizeClasses,
  variantClasses,
  iconClasses,
  widthClass,
  className
].filter(Boolean).join(' ');

const Element = href ? 'a' : 'button';
const elementProps = href ? { href } : { type };
---

<Element class={buttonClasses} {...elementProps}>
  <slot />
</Element>
