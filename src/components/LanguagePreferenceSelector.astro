---
import { Icon } from '@astrojs/starlight/components';
---
<div class="flex items-center">
  <div class="mr-2">Language:</div>
<div class="relative">
  <button id="language-selector-button" aria-haspopup="true" aria-expanded="false" class="flex items-center gap-2 bg-gray-900 border border-gray-700 rounded-lg px-3 py-2 text-sm text-white cursor-pointer hover:bg-gray-800">
    <span data-lang-icon="js" class="size-4"><Icon name="seti:javascript" class="size-4" /></span>
    <span data-lang-icon="go" hidden class="size-4"><Icon name="seti:go" class="size-4" /></span>
    <span data-lang-icon="python" hidden class="size-4"><Icon name="seti:python" class="size-4" /></span>
    <span id="current-language"></span>
    <Icon name="down-caret" class="size-4"/>
  </button>
  <ul id="language-options" class="absolute top-full right-0 bg-gray-900 border border-gray-700 rounded-lg list-none mt-1 p-2 z-10 min-w-full" role="listbox" hidden>
    <li><button role="option" data-lang="js" class="w-full text-left bg-transparent border-none text-white px-2 py-1 rounded flex items-center gap-2 hover:bg-blue-600"><Icon name="seti:javascript" class="size-4" />JavaScript</button></li>
    <li><button role="option" data-lang="go" class="w-full text-left bg-transparent border-none text-white px-2 py-1 rounded flex items-center gap-2 hover:bg-blue-600"><Icon name="seti:go" class="size-4" />Go</button></li>
    <li><button role="option" data-lang="python" class="w-full text-left bg-transparent border-none text-white px-2 py-1 rounded flex items-center gap-2 hover:bg-blue-600"><Icon name="seti:python" class="size-4" />Python</button></li>
  </ul>
</div>
</div>

<script>
  declare global {
    interface Window {
      languagePreferenceEnhancer: {
        getCurrentLanguage: () => string;
        setLanguage: (lang: string) => void;
        getLanguageName: (lang: string) => string;
      };
    }
  }
  document.addEventListener('DOMContentLoaded', () => {
    const button = document.getElementById('language-selector-button');
    const currentLanguageSpan = document.getElementById('current-language');
    const options = document.getElementById('language-options');

    if (!button || !currentLanguageSpan || !options) return;

    const enhancer = window.languagePreferenceEnhancer;

    function updateDisplayedLanguage() {
      if (enhancer && currentLanguageSpan && button) {
        const currentLang = enhancer.getCurrentLanguage();
        const langName = enhancer.getLanguageName(currentLang);
        currentLanguageSpan.textContent = langName;

        const iconSpans = button.querySelectorAll('[data-lang-icon]');
        iconSpans.forEach(span => {
          if (span.getAttribute('data-lang-icon') === currentLang) {
            span.removeAttribute('hidden');
          } else {
            span.setAttribute('hidden', '');
          }
        });
      }
    }

    // Set initial language
    updateDisplayedLanguage();

    // Listen for changes
    window.addEventListener('language-preference-changed', updateDisplayedLanguage);

    button.addEventListener('click', (e) => {
      e.stopPropagation();
      const isExpanded = button.getAttribute('aria-expanded') === 'true';
      button.setAttribute('aria-expanded', String(!isExpanded));
      options.toggleAttribute('hidden');
    });

    options.addEventListener('click', (e) => {
      e.stopPropagation();
      const target = e.target as HTMLElement;
      if (target.matches('[data-lang]')) {
        const lang = target.getAttribute('data-lang');
        if (lang) {
          enhancer.setLanguage(lang);
        }
        button.setAttribute('aria-expanded', 'false');
        options.setAttribute('hidden', '');
      }
    });

    // Close dropdown if clicking outside
    document.addEventListener('click', () => {
      button.setAttribute('aria-expanded', 'false');
      options.setAttribute('hidden', '');
    });
  });
</script>
