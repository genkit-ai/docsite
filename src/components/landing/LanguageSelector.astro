---
import Button from './Button.astro';
import Icon from './Icon.astro';

type IconName = 'genkit-logo' | 'github' | 'discord' | 'nodejs' | 'go' | 'python' | 'document' | 'search' | 'code';

interface Language {
  name: string;
  id: string;
  status: string;
  active: boolean;
  icon: IconName;
  href: string;
  code: string;
}

// Component configuration
const config = {
  title: "Genkit in your language",
  subtitle: "Get started with just a few lines of code.",
  ctaText: "Get Started"
};

// Language data with embedded code samples
const languages: Language[] = [
  { 
    name: "Node.js", 
    id: "nodejs",
    status: "STABLE", 
    active: true,
    icon: "nodejs",
    href: "/docs/get-started",
    code: `import { genkit } from 'genkit';
import { googleAI } from '@genkit-ai/googleai';

const ai = genkit({ plugins: [googleAI()] });

const { text } = await ai.generate({
  model: googleAI.model('gemini-2.5-flash'),
  prompt: 'Why is Firebase awesome?'
});`
  },
  { 
    name: "Go", 
    id: "go",
    status: "BETA", 
    active: false,
    icon: "go",
    href: "/go/docs/get-started-go",
    code: `package main

import (
    "context"
    "github.com/firebase/genkit/go/ai"
    "github.com/firebase/genkit/go/plugins/googleai"
)

func main() {
    ai := genkit.New(googleai.Plugin())
    
    response, err := ai.Generate(context.Background(), &ai.GenerateRequest{
        Model:  googleai.Model("gemini-2.5-flash"),
        Prompt: "Why is Firebase awesome?",
    })
}`
  },
  { 
    name: "Python", 
    id: "python",
    status: "ALPHA", 
    active: false,
    icon: "python",
    href: "/python/docs/get-started",
    code: `from genkit import genkit
from genkit.plugins import googleai

ai = genkit(plugins=[googleai.plugin()])

response = ai.generate(
    model=googleai.model('gemini-2.5-flash'),
    prompt='Why is Firebase awesome?'
)`
  }
];

const activeLanguage = languages.find(lang => lang.active) || languages[0];
---

<section class="py-12 px-6">
  <div class="max-w-6xl mx-auto">
    <!-- Section Header -->
    <div class="text-center mb-8">
      <h2 class="section-title mb-4">{config.title}</h2>
      <p class="caption text-muted">{config.subtitle}</p>
    </div>
    
    <!-- Language Selection Card -->
    <div id="language-selector" class="max-w-4xl mx-auto">
    <div class="rounded-2xl overflow-hidden language-selector-container">
      <!-- Language Tabs -->
      <div class="flex flex-col sm:flex-row sm:justify-between sm:items-center p-6">
        <div class="flex items-center flex-wrap gap-2 sm:gap-3 mb-4 sm:mb-0 justify-center sm:justify-start" id="language-tabs">
          {languages.map((language, index) => (
            <button 
              class={`lang-tab ${language.active ? 'active' : ''}`}
              data-language={language.id}
              data-index={index}
            >
              <Icon name={language.icon} size="sm" />
              <span class="text-sm">{language.name}</span>
              <span class="text-sm language-status font-normal">
                {language.status}
              </span>
              <div class="tab-line"></div>
            </button>
          ))}
        </div>
        
        <!-- Get Started Button -->
        <div class="flex justify-center sm:justify-end">
          <Button variant="primary" href={activeLanguage.href}>
            <span data-text="desktop">{config.ctaText} with {activeLanguage.name}</span>
            <span data-text="mobile">Get Started</span>
          </Button>
        </div>
      </div>
      
      <!-- Code Editor -->
      <div class="mx-6 mb-6">
        <div class="overflow-hidden code-window">
          <!-- Editor Header -->
          <div class="flex items-center px-4 py-2 code-header">
            <div class="flex space-x-2">
              <div class="w-3 h-3 bg-red-400 rounded-full"></div>
              <div class="w-3 h-3 bg-yellow-400 rounded-full"></div>
              <div class="w-3 h-3 bg-green-400 rounded-full"></div>
            </div>
          </div>
          
          <!-- Code Content with Syntax Highlighting -->
          <div class="code-container" id="code-container">
            {languages.map((language) => (
              <div class={activeLanguage.id === language.id ? '' : 'hidden'} data-code={language.id}>
                <pre><code>{language.code}</code></pre>
              </div>
            ))}
          </div>
        </div>
      </div>
    </div>
  </div>
</section>

<style>
  /* Container styles */
  .language-selector-container {
    background-color: var(--genkit-nav-bg);
    border: 1px solid var(--border-secondary);
  }
  
  .language-status {
    color: var(--text-muted);
  }
  
  /* Code editor styles */
  .code-window {
    border: 1px solid var(--border-primary);
  }
  
  .code-header {
    background-color: var(--surface-elevated);
    border-bottom: 1px solid var(--border-light);
  }
  
  .code-container {
    background-color: var(--landing-bg);
  }
  
  .code-container :global(pre) {
    margin: 0;
    background: transparent;
    border-radius: 0;
    font-family: var(--font-mono);
    overflow-x: auto;
    padding: 1rem 1rem 1.5rem;
    font-size: 12px;
    line-height: 1.4;
  }
  
  .code-container :global(code) {
    color: var(--text-primary);
  }

  /* Language tab styles */
  .lang-tab {
    position: relative; /* For .tab-line absolute positioning */
    display: flex;
    align-items: center;
    gap: 0.375rem;
    color: var(--text-primary);
    padding: 0.625rem 0.75rem;
    font-weight: 500;
    opacity: 0.7;
    transition: opacity 200ms;
    border-radius: 0.5rem;
    white-space: nowrap;
    min-width: fit-content;
  }
  
  .lang-tab:hover,
  .lang-tab.active {
    opacity: 1;
  }
  
  .tab-line {
    position: absolute;
    bottom: -1px;
    left: 0.75rem;
    right: 0.75rem;
    height: 2px;
    background-color: var(--text-primary);
    /* scaleX(0) creates center-outward animation vs left-to-right width animation */
    transform: scaleX(0);
    transition: transform 200ms;
  }
  
  .lang-tab:hover .tab-line,
  .lang-tab.active .tab-line {
    transform: scaleX(1);
  }

  /* Responsive button text */
  [data-text="desktop"] {
    display: none;
  }
  
  [data-text="mobile"] {
    display: inline;
  }
  
  /* Mobile: compact tabs for wrapping */
  @media (max-width: 639px) {
    .lang-tab {
      padding: 0.5rem 0.625rem;
      gap: 0.25rem;
      font-size: 0.875rem;
    }
    
    .lang-tab .language-status {
      font-size: 0.75rem;
    }
  }
  
  /* Desktop: matches Tailwind sm: breakpoint (640px) */
  @media (min-width: 640px) {
    .lang-tab {
      gap: 0.5rem;
      padding: 0.625rem 0.875rem;
    }
    
    .code-container :global(pre) {
      padding: 2rem 1.5rem;
      font-size: 14px;
      line-height: 1.5;
    }
    
    [data-text="desktop"] {
      display: inline;
    }
    
    [data-text="mobile"] {
      display: none;
    }
  }
</style>

<script define:vars={{ languages, config }}>
   // This handles the interactive tab switching behavior
  document.addEventListener('DOMContentLoaded', () => {
    const container = document.getElementById('language-selector');
    if (!container) return; 
    
    const buttons = container.querySelectorAll('[data-language]');
    const codeContainer = container.querySelector('#code-container');
    const ctaButton = container.querySelector('a[href]');
    const languageMap = new Map(languages.map(lang => [lang.id, lang]));
    
    // Add click handlers to each language tab
    buttons.forEach(button => {
      button.addEventListener('click', () => {
        const languageId = button.getAttribute('data-language');
        const language = languageMap.get(languageId);
        if (!language) return; // Safety check - invalid language ID
        
        // Update tab visual states
        buttons.forEach(b => b.classList.toggle('active', b === button));
        
        // Update CTA button text and href
        if (ctaButton) {
          const desktopSpan = ctaButton.querySelector('[data-text="desktop"]');
          const mobileSpan = ctaButton.querySelector('[data-text="mobile"]');
          
          if (desktopSpan) desktopSpan.textContent = `${config.ctaText} with ${language.name}`;
          if (mobileSpan) mobileSpan.textContent = "Get Started";
          
          ctaButton.setAttribute('href', language.href);
        }
        
        // Switch visible code block
        if (codeContainer) {
          codeContainer.querySelectorAll('[data-code]').forEach(block => {
            const shouldShow = block.getAttribute('data-code') === languageId;
            block.classList.toggle('hidden', !shouldShow);
          });
        }
      });
    });
  });
</script>
