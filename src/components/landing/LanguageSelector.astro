---
import Section from '../Section.astro';
import Button from '../Button.astro';
import Icon from '../Icon.astro';

// Responsive utility classes
const responsive = {
  // Spacing
  sectionMargin: "mb-8 sm:mb-16",
  cardPadding: "px-4 sm:px-6",
  tabsPadding: "px-4 sm:px-8 py-4 sm:py-6", 
  editorMargin: "mx-4 sm:mx-8 mb-4 sm:mb-6",
  editorHeaderPadding: "px-4 sm:px-6",
  
  // Layout
  tabsContainer: "flex flex-wrap items-center gap-1 sm:gap-2 sm:space-x-2 mb-4 sm:mb-0",
  tabButton: "relative flex items-center space-x-1 sm:space-x-2 bg-transparent text-white px-2 sm:px-4 py-2 sm:py-3 font-medium transition-all duration-200 group text-xs sm:text-base",
  tabUnderline: "absolute -bottom-px left-0 right-0 h-0.5 bg-white mx-2 sm:mx-4 transition-transform duration-200",
  
  // Typography
  tabName: "text-xs sm:text-sm",
  tabStatus: "text-[8px] sm:text-[10px] text-gray-400 font-normal self-center pt-[1px] sm:pt-[3px]",
  
  // Button
  ctaButton: "rounded-3xl w-full sm:w-auto"
};

// Icon sizes
const icon = {
  xs: "w-3 h-3",
  sm: "w-4 h-4"
};

type IconName = 'genkit-logo' | 'github' | 'discord' | 'nodejs' | 'go' | 'python' | 'document' | 'search';

interface Language {
  readonly name: string;
  readonly id: string;
  readonly status: string;
  readonly icon: IconName;
  readonly active?: boolean;
}

interface Props {
  title?: string;
  subtitle?: string;
  languages: readonly Language[];
  codeExamples: Record<string, string>;
  ctaText?: string;
  ctaHref?: string;
}

const { 
  title,
  subtitle,
  languages,
  codeExamples,
  ctaText,
  ctaHref
} = Astro.props;

// Find the active language or default to first
const activeLanguage = languages.find(lang => lang.active) || languages[0];
const nodeCode = codeExamples['nodejs'] || '';
const goCode = codeExamples['go'] || '';
const pythonCode = codeExamples['python'] || '';
---

<Section spacing="large">
  <!-- Section Header -->
  <div class={`text-center ${responsive.sectionMargin}`}>
    <h1 class="section-title mb-4">{title}</h1>
    <p class="caption text-muted">{subtitle}</p>
  </div>
  
  <!-- Language Selection Card -->
  <div id="language-selector" class={`max-w-4xl mx-auto ${responsive.cardPadding}`}>
    <div class="bg-gray-800 border border-gray-700/50 rounded-2xl overflow-hidden">
      <!-- Language Tabs -->
      <div class={`flex flex-col sm:flex-row sm:justify-between sm:items-center ${responsive.tabsPadding}`}>
        <div class={responsive.tabsContainer} id="language-tabs">
          {languages.map((language, index) => (
            <button 
              class={`${responsive.tabButton} ${
                language.active ? 'opacity-100' : 'opacity-70 hover:opacity-100'
              }`}
              data-language={language.id}
              data-index={index}
            >
              <Icon name={language.icon} size={icon.sm} />
              <span class={responsive.tabName}>{language.name}</span>
              <span class={responsive.tabStatus}>
                {language.status}
              </span>
              
              <!-- Active/Hover underline -->
              <div class={`${responsive.tabUnderline} ${
                language.active 
                  ? '' 
                  : 'scale-x-0 group-hover:scale-x-100'
              }`}></div>
            </button>
          ))}
        </div>
        
        <!-- Get Started Button -->
        <Button variant="primary" class={responsive.ctaButton} href={ctaHref}>
          <span class="hidden sm:inline">{ctaText} with {activeLanguage.name}</span>
          <span class="sm:hidden">{ctaText}</span>
        </Button>
      </div>
      
      <!-- Code Editor -->
      <div class={responsive.editorMargin}>
        <div class="rounded border border-white/75 overflow-hidden">
          <!-- Editor Header -->
          <div class={`flex items-center ${responsive.editorHeaderPadding} py-2 bg-[#3a3a3a] border-b border-white/10`}>
            <div class="flex items-center space-x-2">
              <div class={`${icon.xs} bg-red-400 rounded-full`}></div>
              <div class={`${icon.xs} bg-yellow-400 rounded-full`}></div>
              <div class={`${icon.xs} bg-green-400 rounded-full`}></div>
            </div>
          </div>
          
          <!-- Code Content with Syntax Highlighting -->
          <div class="code-container bg-[#0d0d0f]" id="code-container">
            <div class={activeLanguage.id === 'nodejs' ? '' : 'hidden'} data-code="nodejs">
              <pre><code>{nodeCode}</code></pre>
            </div>
            <div class={activeLanguage.id === 'go' ? '' : 'hidden'} data-code="go">
              <pre><code>{goCode}</code></pre>
            </div>
            <div class={activeLanguage.id === 'python' ? '' : 'hidden'} data-code="python">
              <pre><code>{pythonCode}</code></pre>
            </div>
          </div>
        </div>
      </div>
    </div>
  </div>
</Section>

<style>
  /* Responsive code editor styles */
  .code-container :global(pre) {
    margin: 0 !important;
    background: transparent !important;
    border-radius: 0 !important;
    font-family: var(--font-mono) !important;
    overflow-x: auto;
    
    /* Mobile styles */
    padding: 1rem 1rem 1.5rem !important;
    font-size: 12px !important;
    line-height: 1.4 !important;
  }
  
  /* Desktop styles */
  @media (min-width: 640px) {
    .code-container :global(pre) {
      padding: 2rem 1.5rem !important;
      font-size: 14px !important;
      line-height: 1.5 !important;
    }
  }
  
  .code-container :global(code) {
    font-family: var(--font-mono) !important;
    background: transparent !important;
  }
  
  /* Custom syntax highlighting to match design */
  .code-container :global(.token.keyword) {
    color: #c792ea !important;
  }
  
  .code-container :global(.token.string) {
    color: #c3e88d !important;
  }
  
  .code-container :global(.token.function) {
    color: #82aaff !important;
  }
  
  .code-container :global(.token.property) {
    color: #f07178 !important;
  }
  
  .code-container :global(.token.number) {
    color: #f78c6c !important;
  }
  
  .code-container :global(.token.comment) {
    color: #546e7a !important;
  }
</style>

<script define:vars={{ codeExamples, languages, ctaText }}>
  // Add client-side interactivity for language switching
  document.addEventListener('DOMContentLoaded', () => {
    const container = document.getElementById('language-selector');
    if (!container) return;
    const buttons = container.querySelectorAll('[data-language]');
    const codeContainer = container.querySelector('#code-container');
    const ctaButton = container.querySelector('a[href]');
    
    // Create language names lookup from the languages data
    const languageNames = Object.fromEntries(
      languages.map(lang => [lang.id, lang.name])
    );
    
    buttons.forEach(button => {
      button.addEventListener('click', () => {
        const language = button.getAttribute('data-language');
        if (!language || !codeExamples[language]) return;
        
        // Update active states
        buttons.forEach(b => {
          const underline = b.querySelector('div[class*="absolute"][class*="-bottom-px"]');
          if (b === button) {
            b.classList.remove('opacity-70');
            b.classList.add('opacity-100');
            underline?.classList.remove('scale-x-0', 'group-hover:scale-x-100');
          } else {
            b.classList.add('opacity-70');
            b.classList.remove('opacity-100');
            underline?.classList.add('scale-x-0', 'group-hover:scale-x-100');
          }
        });
        
        // Update CTA button text
        if (ctaButton) {
          const languageName = languageNames[language];
          const hiddenSpan = ctaButton.querySelector('.hidden');
          const visibleSpan = ctaButton.querySelector('.sm\\:hidden');
          if (hiddenSpan) hiddenSpan.textContent = `${ctaText} with ${languageName}`;
          if (visibleSpan) visibleSpan.textContent = `${ctaText}`;
        }
        
        // Switch visible pre-rendered highlighted blocks
        if (codeContainer) {
          const blocks = codeContainer.querySelectorAll('[data-code]');
          blocks.forEach((block) => {
            if (block.getAttribute('data-code') === language) {
              block.classList.remove('hidden');
            } else {
              block.classList.add('hidden');
            }
          });
        }
      });
    });
  });
</script>
