---
import Button from './Button.astro';
import Icon from './Icon.astro';
import { Code } from '@astrojs/starlight/components';

type IconName = 'genkit-logo' | 'github' | 'discord' | 'nodejs' | 'go' | 'python' | 'document' | 'search' | 'code';

interface Provider {
  name: string;
  id: string;
  code: string;
  active?: boolean;
}

interface Language {
  name: string;
  id: string;
  status: string;
  active: boolean;
  icon: IconName;
  href: string;
  lang: string;
  providers: Provider[];
}

// Component configuration
const config = {
  title: "Genkit in your language",
  subtitle: "Get started with just a few lines of code.",
  ctaText: "Get Started"
};

// Language data with embedded code samples for different providers
const languages: Language[] = [
  { 
    name: "Node.js", 
    id: "nodejs",
    status: "STABLE", 
    active: true,
    icon: "nodejs",
    href: "/docs/get-started",
    lang: "js",
    providers: [
      {
        name: "Gemini",
        id: "gemini",
        active: true,
        code: `import { genkit } from 'genkit';
import { googleAI } from '@genkit-ai/google-genai';

const ai = genkit({ plugins: [googleAI()] });

const { text } = await ai.generate({
	model: googleAI.model('gemini-2.5-flash'),
	prompt: 'Why is Genkit awesome?'
});`
      },
      {
        name: "Imagen",
        id: "imagen",
        code: `import { genkit } from 'genkit';
import { googleAI } from '@genkit-ai/google-genai';

const ai = genkit({ plugins: [googleAI()] });

const { media } = await ai.generate({
	model: googleAI.model('imagen-3.0-generate-002'),
	prompt: 'a banana riding a bicycle',
});`
      },
      {
        name: "OpenAI",
        id: "openai",
        code: `import { genkit } from 'genkit';
import { openAI } from '@genkit-ai/compat-oai/openai';

const ai = genkit({ plugins: [openAI()] });

const { text } = await ai.generate({
	model: openAI.model('gpt-4o'),
	prompt: 'Why is Genkit awesome?'
});`
      },
      {
        name: "Anthropic",
        id: "anthropic",
        code: `import { genkit } from 'genkit';
import { anthropic, claude35Sonnet } from 'genkitx-anthropic';

const ai = genkit({ plugins: [anthropic()] });

const { text } = await ai.generate({
	model: claude35Sonnet,
	prompt: 'Why is Genkit awesome?'
});`
      },
      {
        name: "xAI",
        id: "xai",
        code: `import { genkit } from 'genkit';
import { xAI } from '@genkit-ai/compat-oai/xai';

const ai = genkit({ plugins: [xAI()] });

const { text } = await ai.generate({
	model: xAI.model('grok-3-mini'),
	prompt: 'Why is Genkit awesome?',
});`
      },
      {
        name: "DeepSeek",
        id: "deepseek",
        code: `import { genkit } from 'genkit';
import { deepSeek } from '@genkit-ai/compat-oai/deepseek';

const ai = genkit({ plugins: [deepSeek()] });

const { text } = await ai.generate({
	model: deepSeek.model('deepseek-chat'),
	prompt: 'Why is Genkit awesome?',
});`
      },
      {
        name: "Ollama",
        id: "ollama",
        code: `import { genkit } from 'genkit';
import { ollama } from 'genkitx-ollama';

const ai = genkit({ plugins: [ollama()] });

const { text } = await ai.generate({
	model: ollama.model('gemma3:latest'),
	prompt: 'Why is Genkit awesome?',
});`
      }
    ]
  },
  { 
    name: "Go", 
    id: "go",
    status: "STABLE", 
    active: false,
    icon: "go",
    href: "/go/docs/get-started-go",
    lang: "go",
    providers: [
      {
        name: "Gemini",
        id: "gemini",
        active: true,
        code: `import (
	"context"
	"log"

	"github.com/firebase/genkit/go/ai"
	"github.com/firebase/genkit/go/genkit"
	"github.com/firebase/genkit/go/plugins/googlegenai"
)

func main() {
	ctx := context.Background()
	g := genkit.Init(ctx, genkit.WithPlugins(&googlegenai.GoogleAI{}))

	resp, err := genkit.Generate(ctx, g,
		ai.WithPrompt("Why is Genkit awesome?"),
		ai.WithModelName("googleai/gemini-2.5-flash"),
	)
	if err != nil {
		log.Fatal(err)
	}

	log.Println(resp.Text())
}`
      },
      {
        name: "Imagen",
        id: "imagen",
        code: `import (
	"context"
	"fmt"
	"log"

	"github.com/firebase/genkit/go/ai"
	"github.com/firebase/genkit/go/genkit"
	"github.com/firebase/genkit/go/plugins/googlegenai"
)

func main() {
	ctx := context.Background()
	g := genkit.Init(ctx, genkit.WithPlugins(&googlegenai.GoogleAI{}))

	resp, err := genkit.Generate(ctx, g,
		ai.WithPrompt("a banana riding a bicycle"),
		ai.WithModelName("googleai/imagen-3.0-generate-002"),
	)
	if err != nil {
		log.Fatal(err)
	}

	log.Printf("Generated image: %s", resp.Media().URL)
}`
      },
      {
        name: "OpenAI",
        id: "openai",
        code: `import (
	"context"
	"log"

	"github.com/firebase/genkit/go/ai"
	"github.com/firebase/genkit/go/genkit"
	"github.com/firebase/genkit/go/plugins/compat_oai/openai"
)

func main() {
	ctx := context.Background()
	g := genkit.Init(ctx, genkit.WithPlugins(&openai.OpenAI{}))

	resp, err := genkit.Generate(ctx, g,
		ai.WithPrompt("Why is Genkit awesome?"),
		ai.WithModelName("openai/gpt-4o"),
	)
	if err != nil {
		log.Fatal(err)
	}

	log.Println(resp.Text())
}`
      },
      {
        name: "Anthropic",
        id: "anthropic",
        code: `import (
	"context"
	"log"

	"github.com/firebase/genkit/go/ai"
	"github.com/firebase/genkit/go/genkit"
	"github.com/firebase/genkit/go/plugins/compat_oai/anthropic"
)

func main() {
	ctx := context.Background()
	g := genkit.Init(ctx, genkit.WithPlugins(&anthropic.Anthropic{}))

	resp, err := genkit.Generate(ctx, g,
		ai.WithPrompt("Why is Genkit awesome?"),
		ai.WithModelName("anthropic/claude-3-7-sonnet-20250219"),
	)
	if err != nil {
		log.Fatal(err)
	}

	log.Println(resp.Text())
}`
      },
      {
        name: "Ollama",
        id: "ollama",
        code: `import (
	"context"
	"log"

	"github.com/firebase/genkit/go/ai"
	"github.com/firebase/genkit/go/genkit"
	"github.com/firebase/genkit/go/plugins/ollama"
)

func main() {
	ctx := context.Background()
	g := genkit.Init(ctx, genkit.WithPlugins(
		&ollama.Ollama{
			ServerAddress: "http://localhost:11434",
		},
	}))

	resp, err := genkit.Generate(ctx, g,
		ai.WithPrompt("Why is Genkit awesome?"),
		ai.WithModelName("ollama/gemma3:latest"),
	)
	if err != nil {
		log.Fatal(err)
	}

	log.Println(resp.Text())
}`
      }
    ]
  },
  { 
    name: "Python", 
    id: "python",
    status: "ALPHA", 
    active: false,
    icon: "python",
    href: "/python/docs/get-started",
    lang: "python",
    providers: [
      {
        name: "Gemini",
        id: "gemini",
        active: true,
        code: `from genkit.ai import Genkit
from genkit.plugins.google_genai import GoogleAI

ai = Genkit(
	plugins=[GoogleAI()],
)

response = await ai.generate(
	model='googleai/gemini-2.5-flash',
	prompt='Why is Genkit awesome?'
)
print(response.text)`
      },
      {
        name: "Imagen",
        id: "imagen",
        code: `from genkit.ai import Genkit
from genkit.plugins.google_genai import GoogleAI

ai = Genkit(
	plugins=[GoogleAI()],
)

response = await ai.generate(
	model='googleai/imagen-3.0-generate-002',
	prompt='a banana riding a bicycle'
)

# Access generated media
if response.media:
	print(f"Generated image: {response.media.url}")`
      },
      {
        name: "OpenAI",
        id: "openai",
        code: `from genkit.ai import Genkit
from genkit.plugins.compat_oai import OpenAI

ai = Genkit(
	plugins=[OpenAI()],
)

response = await ai.generate(
	model='openai/gpt-4o',
	prompt='Why is Genkit awesome?'
)
print(response.text)`
      },
      {
        name: "Ollama",
        id: "ollama",
        code: `from genkit.ai import Genkit
from genkit.plugins.ollama import Ollama
from genkit.plugins.ollama.models import ModelDefinition

ai = Genkit(
	plugins=[
		Ollama(
			models=[
				ModelDefinition(name='gemma3:latest'),
			],
		)
	],
)

response = await ai.generate(
	model="ollama/gemma3:latest",
	prompt='Why is Genkit awesome?'
)
print(response.text)`
      }
    ]
  }
];

const activeLanguage = languages.find(lang => lang.active) || languages[0];
---

<section class="py-12 px-6">
  <div class="max-w-6xl mx-auto">
    <!-- Section Header -->
    <div class="text-center mb-8">
      <h2 class="section-title mb-4">{config.title}</h2>
      <p class="caption text-muted">{config.subtitle}</p>
    </div>
    
    <!-- Language Selection Card -->
    <div id="language-selector" class="max-w-4xl mx-auto">
    <div class="rounded-2xl overflow-hidden language-selector-container">
      <!-- Language Tabs -->
      <div class="flex flex-col sm:flex-row sm:justify-between sm:items-center p-6">
        <div class="flex items-center flex-wrap gap-2 sm:gap-3 mb-4 sm:mb-0 justify-center sm:justify-start" id="language-tabs">
          {languages.map((language, index) => (
            <button 
              class={`lang-tab ${language.active ? 'active' : ''}`}
              data-language={language.id}
              data-index={index}
            >
              <Icon name={language.icon} size="sm" />
              <span class="text-base">{language.name}</span>
              <span class="text-sm sm:text-base language-status font-normal">
                {language.status}
              </span>
              <div class="tab-line"></div>
            </button>
          ))}
        </div>
        
        <!-- Get Started Button -->
        <div class="flex justify-center sm:justify-end">
          <Button variant="primary" href={activeLanguage.href}>
            <span class="hidden lg:inline" data-text="desktop">{config.ctaText} with {activeLanguage.name}</span>
            <span class="inline lg:hidden" data-text="mobile">{config.ctaText}</span>
          </Button>
        </div>
      </div>
      
      <!-- Code Editor with Provider Tabs -->
      <div class="mx-6 mb-6">
        <div class="code-container" id="code-container">
          {languages.map((language) => {
            const activeProvider = language.providers.find(p => p.active) || language.providers[0];
            return (
              <div class={activeLanguage.id === language.id ? '' : 'hidden'} data-code={language.id}>
                <!-- Provider Tabs -->
                <div class="provider-tabs" data-language={language.id}>
                  {language.providers.map((provider) => (
                    <button 
                      class={`provider-tab ${provider.active || provider === activeProvider ? 'active' : ''}`}
                      data-provider={provider.id}
                      data-language={language.id}
                    >
                      {provider.name}
                    </button>
                  ))}
                </div>
                
                <!-- Provider Code Snippets -->
                <div class="provider-content" data-language={language.id}>
                  {language.providers.map((provider) => (
                    <div 
                      class={`provider-code ${provider.active || provider === activeProvider ? '' : 'hidden'}`} 
                      data-provider={provider.id}
                      data-language={language.id}
                    >
                      <Code 
                        code={provider.code} 
                        lang={language.lang}
                        frame="terminal"
                      />
                    </div>
                  ))}
                </div>
              </div>
            );
          })}
        </div>
      </div>
    </div>
  </div>
</section>

<style>
  /* Container styles */
  .language-selector-container {
    background-color: var(--genkit-nav-bg);
    border: 1px solid var(--border-secondary);
  }
  
  .language-status {
    color: var(--text-muted);
  }
  
  /* 
   * Starlight's <Code> component outside of Starlight layout context doesn't render
   * frame decorations properly. Using frame="terminal" + CSS variable overrides
   * to match Starlight docs styling exactly.
   */

  .code-container {
    /* Container for switching between languages */
  }
  
  .code-container :global(.expressive-code) {
    --ec-theme-selection: 0; /* Force dark theme */
    margin: 0;
    --ec-brdWd: 1px;
    --ec-brdCol: #3e3e3eff;
    --ec-frm-trmBg: #151515ff;        /* Code background */
    --ec-frm-trmTtbBg: #1f1f1f;       /* Header background */
    --ec-frm-trmTtbDotsFg: #3e3e3eff; /* Three dots color */
    --ec-frm-trmTtbDotsOpa: 1;
    --ec-frm-trmTtbBrdBtmCol: #3e3e3eff; /* Ensure divider uses our border color */
  }
  
  .code-container :global(.expressive-code .frame.is-terminal .header) {
    border: 1px solid #3e3e3eff;
    padding-block: 0.4rem;
  }

  /* Scoped, build-proof divider override: ensure dark 1px rule, no light border */
  .code-container :global(.expressive-code .frame.is-terminal .header::after) {
    content: "";
    position: absolute;
    left: 0;
    right: 0;
    bottom: 0;
    height: 1px;
    border: 0 !important;
  }
  
  .code-container :global(.expressive-code .frame.is-terminal pre) {
    border: 1px solid #3e3e3eff;
    border-top: none;
    background: #151515ff !important;
  }
  
  /* Force dark theme syntax colors */
  .code-container :global(.ec-line span) {
    color: var(--0) !important;
  }
  
  .code-container :global(.expressive-code pre) {
    background: #151515ff !important;
  }

  /* Tweak copy toolbar spacing so it renders correctly outside docs layout */
  .code-container :global(.expressive-code .copy) {
    margin-top: 5px !important;
  }

  /* Language tab styles */
  .lang-tab {
    position: relative; /* For .tab-line absolute positioning */
    display: flex;
    align-items: center;
    gap: 0.375rem;
    color: var(--text-primary);
    padding: 0.625rem 0.75rem; /* Default: will be overridden by responsive styles */
    font-weight: 500;
    opacity: 0.7;
    transition: opacity 200ms;
    border-radius: 0.5rem;
    white-space: nowrap;
    min-width: fit-content;
    cursor: pointer !important; /* Force cursor pointer in all environments */
    user-select: none; /* Prevent text selection */
  }
  
  .lang-tab:hover,
  .lang-tab.active {
    opacity: 1;
  }
  
  .tab-line {
    position: absolute;
    bottom: -1px;
    left: 0.75rem;
    right: 0.75rem;
    height: 2px;
    background-color: var(--text-primary);
    /* scaleX(0) creates center-outward animation vs left-to-right width animation */
    transform: scaleX(0);
    transition: transform 200ms;
  }
  
  .lang-tab:hover .tab-line,
  .lang-tab.active .tab-line {
    transform: scaleX(1);
  }

  /* Mobile: compact tabs for wrapping */
  @media (max-width: 639px) {
    .lang-tab {
      padding: 0.5rem 0.625rem;
      gap: 0.25rem;
    }
  }
  
  /* Desktop: matches Tailwind sm: breakpoint (640px) */
  @media (min-width: 640px) {
    .lang-tab {
      gap: 0.5rem;
      padding: 0.625rem 0.875rem;
    }
    
    .code-container :global(pre) {
      padding: 2rem 1.5rem;
      font-size: 1rem; /* 16px */
      line-height: 1.5;
    }
  }

  /* Provider tabs styles */
  .provider-tabs {
    display: flex;
    gap: 0.25rem;
    margin-bottom: 0.75rem;
    border-bottom: 1px solid var(--border-secondary);
    padding-bottom: 0.5rem;
    overflow-x: auto;
    scrollbar-width: none;
    -ms-overflow-style: none;
  }

  .provider-tabs::-webkit-scrollbar {
    display: none;
  }

  .provider-tab {
    padding: 0.5rem 0.75rem;
    border: 1px solid var(--border-secondary);
    border-radius: 0.5rem;
    background: var(--sl-color-bg);
    color: var(--text-muted);
    cursor: pointer;
    transition: all 0.2s ease;
    font-size: 0.875rem;
    font-weight: 400;
    white-space: nowrap;
    min-width: fit-content;
    font-family: inherit;
    margin: 0;
  }

  .provider-tab:hover {
    border-color: var(--sl-color-accent);
    color: var(--text-primary);
  }

  .provider-tab.active {
    background-color: var(--sl-color-accent);
    color: white;
    border-color: var(--sl-color-accent);
  }

  .provider-content {
    /* Container for switching between providers */
  }

  .provider-code {
    /* Individual code blocks for each provider */
  }

  /* Mobile responsive provider tabs */
  @media (max-width: 639px) {
    .provider-tab {
      padding: 0.375rem 0.5rem;
      font-size: 0.75rem;
    }
  }
</style>

<script define:vars={{ languages, config }}>
  // This handles the interactive tab switching behavior
  document.addEventListener('DOMContentLoaded', () => {
    const container = document.getElementById('language-selector');
    if (!container) return; 
    
    const languageButtons = container.querySelectorAll('[data-language]:not([data-provider])');
    const codeContainer = container.querySelector('#code-container');
    const ctaButton = container.querySelector('a[href]');
    const languageMap = new Map(languages.map(lang => [lang.id, lang]));
    
    // Track the currently active language
    let activeLanguageId = languages.find(lang => lang.active)?.id || languages[0]?.id;
    
    // Function to ensure the active language tab stays highlighted
    function maintainActiveLanguageTab() {
      languageButtons.forEach(button => {
        const languageId = button.getAttribute('data-language');
        button.classList.toggle('active', languageId === activeLanguageId);
      });
    }
    
    // Add click handlers to each language tab
    languageButtons.forEach(button => {
      button.addEventListener('click', () => {
        const languageId = button.getAttribute('data-language');
        const language = languageMap.get(languageId);
        if (!language) return; // Safety check - invalid language ID
        
        // Update active language tracking
        activeLanguageId = languageId;
        
        // Update tab visual states
        maintainActiveLanguageTab();
        
        // Update CTA button text and href
        if (ctaButton) {
          const desktopSpan = ctaButton.querySelector('[data-text="desktop"]');
          const mobileSpan = ctaButton.querySelector('[data-text="mobile"]');
          
          if (desktopSpan) desktopSpan.textContent = `${config.ctaText} with ${language.name}`;
          if (mobileSpan) mobileSpan.textContent = config.ctaText;
          
          ctaButton.setAttribute('href', language.href);
        }
        
        // Switch visible code block
        if (codeContainer) {
          codeContainer.querySelectorAll('[data-code]').forEach(block => {
            const shouldShow = block.getAttribute('data-code') === languageId;
            block.classList.toggle('hidden', !shouldShow);
          });
        }
      });
    });

    // Add click handlers to provider tabs
    const providerButtons = container.querySelectorAll('.provider-tab[data-provider]');
    providerButtons.forEach(button => {
      button.addEventListener('click', () => {
        const providerId = button.getAttribute('data-provider');
        const languageId = button.getAttribute('data-language');
        
        if (!providerId || !languageId) return;
        
        // Ensure the main language tab stays active
        maintainActiveLanguageTab();
        
        // Update provider tab visual states for this language
        const languageProviderTabs = container.querySelectorAll(`.provider-tab[data-language="${languageId}"]`);
        languageProviderTabs.forEach(tab => {
          tab.classList.toggle('active', tab === button);
        });
        
        // Switch visible provider code block for this language
        const providerCodeBlocks = container.querySelectorAll(`.provider-code[data-language="${languageId}"]`);
        providerCodeBlocks.forEach(block => {
          const shouldShow = block.getAttribute('data-provider') === providerId;
          block.classList.toggle('hidden', !shouldShow);
        });
      });
    });
    
    // Initialize the active language tab state
    maintainActiveLanguageTab();
  });
</script>
